name: Blue-Green Deployment - Staging & Production

on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run full test suite before promotion'
        required: true
        default: true
        type: boolean
      auto_promote:
        description: 'Automatically promote to production if tests pass'
        required: true
        default: false
        type: boolean
      environment:
        description: 'Target environment for initial deployment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      rollback_base_id:
        description: 'Base ID to rollback to (leave empty for normal deployment)'
        required: false
        type: string

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event.inputs.rollback_base_id == ''
    
    outputs:
      staging-status: ${{ steps.deploy.outputs.status }}
      staging-base-id: ${{ steps.deploy.outputs.staging_base_id }}
      tests-passed: ${{ steps.tests.outputs.passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r agents/requirements.txt
        pip install PyNaCl  # Required for GitHub secret encryption
    
    - name: Verify required secrets
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID_PROD: ${{ secrets.AIRTABLE_BASE_ID_PROD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîê Verifying deployment secrets..."
        
        if [ -z "$AIRTABLE_API_KEY" ]; then
          echo "‚ùå AIRTABLE_API_KEY secret not found"
          exit 1
        fi
        
        if [ -z "$AIRTABLE_BASE_ID_PROD" ]; then
          echo "‚ùå AIRTABLE_BASE_ID_PROD secret not found"
          exit 1
        fi
        
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "‚ùå GITHUB_TOKEN not available"
          exit 1
        fi
        
        echo "‚úÖ All required secrets verified"
        echo "   Airtable API Key length: ${#AIRTABLE_API_KEY}"
        echo "   Production Base ID: ${AIRTABLE_BASE_ID_PROD:0:6}..."
    
    - name: Deploy staging environment
      id: deploy
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID_PROD: ${{ secrets.AIRTABLE_BASE_ID_PROD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "üîµ Starting staging deployment..."
        
        python deploy_staging.py > staging_deploy.log 2>&1
        DEPLOY_EXIT_CODE=$?
        
        echo "üìã Deployment log:"
        cat staging_deploy.log
        
        if [ $DEPLOY_EXIT_CODE -eq 0 ]; then
          echo "status=green" >> $GITHUB_OUTPUT
          
          # Extract staging base ID from log
          STAGING_BASE_ID=$(grep -o '"staging_base_id": "[^"]*"' staging_deploy.log | cut -d'"' -f4 || echo "unknown")
          echo "staging_base_id=$STAGING_BASE_ID" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Staging deployment successful"
        elif [ $DEPLOY_EXIT_CODE -eq 1 ]; then
          echo "status=yellow" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  Staging deployment completed with warnings"
        else
          echo "status=red" >> $GITHUB_OUTPUT
          echo "‚ùå Staging deployment failed"
          exit 1
        fi
    
    - name: Upload staging deployment logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: staging-deployment-logs
        path: |
          staging_deploy.log
          deployment_backup.json
        retention-days: 30
    
    - name: Run test suite
      id: tests
      if: github.event.inputs.run_tests == 'true'
      env:
        AIRTABLE_BASE_ID_STAGING: ${{ steps.deploy.outputs.staging_base_id }}
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AGENT_KEY: ${{ secrets.AGENT_KEY }}
        DRY_RUN: 0  # Run against real staging environment
      run: |
        echo "üß™ Running comprehensive test suite against staging..."
        
        # Run pytest
        pytest -v --tb=short --junitxml=staging-test-results.xml
        PYTEST_EXIT_CODE=$?
        
        # Run sanity tests
        python run_sanity_tests.py
        SANITY_EXIT_CODE=$?
        
        # Run KPI dashboard test
        python kpi_dashboard.py --logs-dir data/logs > kpi_test.log 2>&1
        KPI_EXIT_CODE=$?
        
        if [ $PYTEST_EXIT_CODE -eq 0 ] && [ $SANITY_EXIT_CODE -eq 0 ] && [ $KPI_EXIT_CODE -eq 0 ]; then
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ All tests passed"
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "‚ùå Some tests failed"
          echo "   pytest: $PYTEST_EXIT_CODE"
          echo "   sanity: $SANITY_EXIT_CODE"
          echo "   kpi: $KPI_EXIT_CODE"
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: github.event.inputs.run_tests == 'true'
      with:
        name: staging-test-results
        path: |
          staging-test-results.xml
          kpi_test.log
          data/logs/
        retention-days: 30

  promote-to-production:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: deploy-staging
    if: |
      always() && 
      (needs.deploy-staging.outputs.staging-status == 'green') &&
      (github.event.inputs.run_tests == 'false' || needs.deploy-staging.outputs.tests-passed == 'true') &&
      (github.event.inputs.auto_promote == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r agents/requirements.txt
        pip install PyNaCl  # Required for GitHub secret encryption
    
    - name: Promote to production
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID_PROD: ${{ secrets.AIRTABLE_BASE_ID_PROD }}
        AIRTABLE_BASE_ID_STAGING: ${{ needs.deploy-staging.outputs.staging-base-id }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "üü¢ Starting production promotion..."
        echo "üìä Staging base: $AIRTABLE_BASE_ID_STAGING"
        echo "üìä Current prod: $AIRTABLE_BASE_ID_PROD"
        
        python promote_to_prod.py > promotion.log 2>&1
        PROMOTION_EXIT_CODE=$?
        
        echo "üìã Promotion log:"
        cat promotion.log
        
        if [ $PROMOTION_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Production promotion successful"
        else
          echo "‚ùå Production promotion failed"
          exit 1
        fi
    
    - name: Upload promotion logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: production-promotion-logs
        path: |
          promotion.log
          deployment_backup.json
        retention-days: 90
    
    - name: Post-promotion health check
      env:
        AIRTABLE_BASE_ID_PROD: ${{ needs.deploy-staging.outputs.staging-base-id }}
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
      run: |
        echo "üè• Running post-promotion health check..."
        
        # Wait for systems to stabilize
        sleep 30
        
        # Basic connectivity test
        python -c "
        import os
        import requests
        
        base_id = os.getenv('AIRTABLE_BASE_ID_PROD')
        api_key = os.getenv('AIRTABLE_API_KEY')
        
        url = f'https://api.airtable.com/v0/meta/bases/{base_id}/tables'
        headers = {'Authorization': f'Bearer {api_key}'}
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            tables = response.json().get('tables', [])
            print(f'‚úÖ Production health check passed')
            print(f'   Base ID: {base_id}')
            print(f'   Tables: {len(tables)}')
        else:
            print(f'‚ùå Production health check failed: {response.status_code}')
            exit(1)
        "

  rollback:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.rollback_base_id != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r agents/requirements.txt
        pip install PyNaCl  # Required for GitHub secret encryption
    
    - name: Execute rollback
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID_PROD: ${{ secrets.AIRTABLE_BASE_ID_PROD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        ROLLBACK_BASE_ID: ${{ github.event.inputs.rollback_base_id }}
      run: |
        echo "üîÑ Starting rollback to base: $ROLLBACK_BASE_ID"
        
        python promote_to_prod.py --rollback "$ROLLBACK_BASE_ID" > rollback.log 2>&1
        ROLLBACK_EXIT_CODE=$?
        
        echo "üìã Rollback log:"
        cat rollback.log
        
        if [ $ROLLBACK_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Rollback successful"
        else
          echo "‚ùå Rollback failed"
          exit 1
        fi
    
    - name: Upload rollback logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: rollback-logs
        path: rollback.log
        retention-days: 90

  notification:
    runs-on: ubuntu-latest
    needs: [deploy-staging, promote-to-production, rollback]
    if: always()
    
    steps:
    - name: Deployment summary
      run: |
        echo "üìä Blue-Green Deployment Summary"
        echo "================================"
        echo "üïê Timestamp: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
        echo "üë§ Triggered by: ${{ github.actor }}"
        echo "üîß Run tests: ${{ github.event.inputs.run_tests }}"
        echo "üöÄ Auto promote: ${{ github.event.inputs.auto_promote }}"
        
        if [ "${{ github.event.inputs.rollback_base_id }}" != "" ]; then
          echo "üîÑ Rollback mode: ${{ github.event.inputs.rollback_base_id }}"
          echo "üìä Rollback status: ${{ needs.rollback.result }}"
        else
          echo "üîµ Staging status: ${{ needs.deploy-staging.result }}"
          echo "üü¢ Production status: ${{ needs.promote-to-production.result }}"
          
          if [ "${{ needs.deploy-staging.outputs.staging-base-id }}" != "" ]; then
            echo "üìã Staging base: ${{ needs.deploy-staging.outputs.staging-base-id }}"
          fi
        fi
        
        echo ""
        echo "üîó Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # Determine overall status
        if [ "${{ needs.deploy-staging.result }}" == "success" ] && [ "${{ needs.promote-to-production.result }}" == "success" ]; then
          echo "üéâ Overall status: SUCCESS"
        elif [ "${{ needs.rollback.result }}" == "success" ]; then
          echo "‚úÖ Rollback status: SUCCESS"
        else
          echo "‚ö†Ô∏è  Overall status: PARTIAL/FAILED"
        fi